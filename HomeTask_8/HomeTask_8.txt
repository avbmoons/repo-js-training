Урок 8. Анонимные функции, замыкания

1. Для практикума из занятия 7 продумать, где можно применить замыкания.

В принципе возможно замкнуть функции второго уровня функциональной архитектуры, т.е.:
для startGame()  вписать respawn(), createFood(), creаteProblem();
для move() вписать haveFood(), headTeleport()  и т.д.
Т.о получить функциональные модули, которые можно дорабатывать независимо.
Для этой игры смысла особого не вижу, но в принципе да, сделать можно.


2. Не выполняя кода, ответить, что выведет браузер и почему:


if (!("a" in window)) {
    var a = 1;
}
alert(a);


По условию при загрузке окна" а - неопределено, алерт выведет "undefined".
Если в условии убрать знак отрицания "!", то алерт выведет присвоенное значение а,
в данном примере - это 1.

__________________________________

var b = function a(x) {
    x && a(--x);
};
alert(a);

Выражение для функции а(х) неопределено, будет ошибка.
__________________________________

function a(x) {
    return x * 2;
}
var a;
alert(a);

Алерт выведет строку кода для функции а.
Чтобы вывелось значение в алерте нужно указать а(), 
т.е. "функция к исполнению".
__________________________________

function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);

Алерт выведет значение аргумента функции b с индексом 2, 
т.е. третьего аргумента - это а.
Значение этому аргументу присвоено в теле функции. 
При обращении к функции выведется присвоенное внутри этой функции 
значение - это 10.
__________________________________

function a() {
    alert(this);
}
a.call(null);

Алерт выведет ссылку на глобальный объект window, т к при вызове
аргументы тгдд и  undefined заменяются на указанный объект.
__________________________________
